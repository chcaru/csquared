{"name":"Csquared","tagline":"CSquared is an interpreted programming language implemented completely in C#.","body":"#Variables\r\n\r\nExample variable declaration:\r\n```\r\nvar myVar = 0;\r\n```\r\nAll variable declarations must be preceded with \"var.\"\r\nIdentifiers must be ALL letters (no numbers ect...)!\r\n\r\nAssignment:\r\n```\r\nmyVar = \"a string\";\r\nmyVar = 5.4;\r\nmyVar = true;\r\nmyVar = false;\r\n```\r\nIntergers, Reals, Strings, Booleans, Objects, Arrays, Lambdas, and Lambda Calls are supported for declaration/assignment.\r\n\r\n*Strings are enumerable.\r\n*Reals must be \"full,\" and cannot be partial (.0 or 0. is not valid, 0.0 is)\r\n*Objects, Arrays, Lambdas, and Lambda Calls are detailed in the following.\r\n\r\n#Lambdas\r\n\r\nLambda expressions are of the form:\r\n```\r\n(p1, p2, ... , pn) => { s1; s2; ... sn; }\r\nOR\r\n(p1, p2, ... , pn) => e\r\n```\r\nwhere p is a parameter name, s is a body statement, and e is an expression.\r\n\r\nFor example:\r\n```\r\n(x, y) => x + y  \r\n\r\n(x, y) => { return x + y; }\r\n```\r\nare a valid lambda expressions. If the lambda has no body, the expression's value is implicitly returned.\r\nIf the lambda has a body, then there must be an explicit return, otherwise null is returned by default.\r\n\r\nLambda expressions can be used like functions when assigned to a variable.\r\n```\r\nvar sum = (x, y) => {\r\n\treturn x + y;\t\r\n};\r\n\r\nOR\r\n\r\nvar sum = (x, y) => x + y;\r\n```\r\nCalling a lambda expression is of the form:\r\n```\r\nvar a = 5;\r\nvar z = sum(a, 4); //z would then be 9\r\nsum(a, 4); // is valid as well\r\n```\r\n\r\n#Objects\r\n\r\nObjects are of the form:\r\n```\r\n{\r\n\tvarDec1;\r\n\tvarDec2;\r\n\t...\r\n\tvarDecn;\r\n}\r\n```\r\nFor example, to assign an Object to a variable:\r\n```\r\nvar person = {\r\n\tvar name = \"chris caruso\";\t\r\n\tvar age = 21;\r\n\tvar toString = () => name + \": \" + age;\r\n};\r\n```\r\nMembers of the object can be accessed as in the following example:\r\n```\r\nvar myName = person.name;\r\nvar myAge = person.age;\r\nvar me = person.toString();\r\nvar doubleAge = person.age * 2;\r\n```\r\nAssigning a member of an object is as follows:\r\n```\r\nperson[\"name\"] = \"christopher a caruso\";\r\n```\r\n*Assignment of an object's members is limited to the object's immediate members, not nested :<\r\n*Objects are enumerable.\r\n\r\n#Arrays\r\n\r\nArrays are of the form:\r\n```\r\n\t[e1, e2, ... , em](n)\r\nOR\r\n\t[e1, e2, ... , en]\r\n```\r\nWhere n and m are integers (m <= n) and e is an expression.\r\n\r\nAn Array's size can either be implicitly or explicitly defined.\r\nExample 1 explicitly defines a size of n with the pre-existing values 0 .. m\r\nExample 2 implicitly define a size of n as denoted by the number of existing expressions.\r\n\r\nExample of assigning an Array to a variable:\r\n```\r\nvar arrayA = [1, 2, \"sd\", {}];\r\n\r\nOR\r\n\r\nvar arrayB = [1, 2, \"sd\", {}](10);\r\n```\r\narrayA has a size of 4, while arrayB has a size of 10.\r\n\r\nUninitialized values in an explicitly sized array are defaulted to null.\r\n\r\nIndexing/Assigning an Array:\r\n```\r\nvar a = arrayB[0];\r\n\r\narrayB[7] = \"e\";\r\n```\r\n\r\n*Arrays are enumerable.\r\n\r\n#Iteration\r\n\r\n###Foreach statement\r\n\r\nA foreach statement is used to iterate through an enumerable type.\r\n\r\nEnumerable types include Strings, Arrays, and Objects.\r\n\r\nThe form of a foreach statement is as follows:\r\n```\r\nforeach (id in enumerable){\r\n\ts1;\r\n\ts2;\r\n\t...\r\n\tsn;\r\n}\r\n```\r\nwhere id is an identifier (no declaration required, no var required) and enumerable is any enumerable type.\r\ns is a statement.\r\n\r\nThe statements in the body will be executed for each enumerated expression in the enumerable, given to the \r\nvariable with the name id.\r\n\r\nFor example:\r\n```\r\nvar array = [\"a\", \"b\", \"c\"];\r\n\r\nforeach (item in array){\r\n\tprintln(item);\r\n}\r\n```\r\nwould print the value of each item in the array. \r\n\r\nItems in an object are anonymously enumerated.\r\n\r\nStrings of size 1 are to be expected from enumeration of a String. (each char in the string)\r\n\r\n###While statement\r\n\r\nA while statement acts like a normal while statement would in C.\r\n\r\nIt is of the form:\r\n```\r\nwhile (be1) {\r\n\ts1;\r\n\ts2;\r\n\t...\r\n        sn;\r\n}\r\n```\r\nwhere be is a boolean expression or an expression which can evaluate to a boolean value and s is a statement.\r\n\r\nThe body statements will be executed for each iteration while the boolean expression is true.\r\n\r\nEverything except statements can evaluate to a boolean. Anything which is Null is false. If the expression is boolean, it assumes its value, otherwise, since it is not null, it is true.\r\n```\r\n\t\t\tEXP.:  VALUE\r\n\t\t\t------------\r\n\t\t\tnull:  false\r\n\t\t\ttrue:  true\r\n\t\t\tfalse: false\r\n\t\t\telse:  true\r\n```\r\nThis will also apply to if statements later.\r\n\r\n#Conditionals\r\n\r\nThe if statement is the only form of condition control, other than a while statement.\r\n\r\nThe work the same as they do in C. Except they must have a block.\r\n\r\nThe if statement is of the following form:\r\n```\r\nif (be1){\r\n\ts1;\r\n\ts2;\r\n\t...\r\n\tsn;\r\n}\r\n\r\nOR\r\n\r\nif (be1){\r\n\ts1;\r\n\ts2;\r\n\t...\r\n\tsn;\r\n}\r\nelse {\r\n\ts1;\r\n\ts2;\r\n\t...\r\n\tsm;\r\n}\r\n```\r\nwhere be is a boolean expression and follows the same rules as detailed in the While statement section. \r\n\r\n#Operators\r\n\r\nOperators include:\r\n```\r\n\t\t+\r\n\t\t-\r\n\t\t/\r\n\t\t*\r\n\t\t==\r\n\t\t!=\r\n\t\t|\r\n\t\t&\r\n\t\t<\r\n\t\t<=\r\n\t\t>\r\n\t\t>=\r\n\t\t!\r\n\t\t<-\r\n\t\t->\r\n```\r\nAll operators work as normal. \r\n\r\n###<- operator:\r\n\r\nThis operator can be used on an object to add an item to the end of an object anonymously \r\n\r\nvar obj = { };\r\n```\r\nobj <- 3;\r\nobj <- 4;\r\n```\r\nthe following operations can be conceptualized as:\r\n```\r\n// obj = { 3; 4; }; \r\n\r\nOR\r\n\r\ncan be used to remove the first item of an object:\r\n\r\n//cont from prev. example\r\n\r\nvar b;\r\n\r\nb <- obj;\r\n\r\n//b is 3\r\n```\r\n\r\n*Items added to an object anonymously can be access as above or during enumeration of a foreach statement.\r\n\r\n###-> operator:\r\n\r\nThis operator can be used on an object to remove the last item of the object.\r\n```\r\nvar obj = { };\r\n\r\nobj <- 3;\r\nobj <- 4;\r\n\r\nvar b;\r\n\r\nobj -> b;\r\n\r\n//b is 4\r\n```\r\n\r\n#Built in functions\r\n\t\r\n###Type checks\r\n```\r\nisBool(e);\r\nisInt(e);\r\nisReal(e);\r\nisObject(e);\r\nisArray(e);\r\nisLambda(e);\r\n```\r\n###Casts\r\n```\r\ntoInt(e);\r\ntoReal(e);\r\ntoString(e);\r\ntoBool(e);\r\n```\r\n###Other\r\n```\r\nprintln(s);\r\nprint(s);\r\ninput();\r\ncount(e); // returns the number of items in an enumerable\r\nempty(e); // returns if there are any items in an enumerable\r\ninject(s); // takes a string, evaluates it as code in the current line of execution\r\n```\r\n\r\n#CONCURRENCY!\r\n\r\n###Parallelization\r\n\r\nParallelization is performed via use of a foreach statement.\r\n\r\nWith the parallel modifier placed before a foreach statement, the foreach statement will execute each body block corresponding to an enumerated value in parallel. Note, this means the order is indeterminate.\r\n\r\nForeach example:\r\n```\r\nvar array = [\"a\", \"b\", \"c\", \"d\"];\r\n\r\nparallel foreach (item in array){\r\n\tprintln(item);\r\n}\r\n```\r\ncould result in printing the values in array in any order.\r\n\r\n###Mutual exclusion\r\n\r\nMutex like behavior can be exhibited through use of the lock statement.\r\n\r\nFor example: \r\n```\r\nvar a = 1;\r\n\r\nlock(a){\r\n\ta = a + 1;\r\n}\r\n```\r\nWill only allow access to the variable a inside the block.\r\n\r\nAccess to a other than inside the block statements will result in blocking the calling thread.\r\n\r\n###Asynchronous execution\r\n\r\nExpressions can be execude currently in the background using the async modifier.\r\n\r\nasync placed before any expression will start execution of the expression in a background thread and return control to the calling thread immediately. Though, the expression's value is not returned, an asynx expression in a busy state is. The value of the expession can be access by trying to evaluate the async expression AFTER it has returned the first time. If the async expression is still running, and is busy, the accessing thread will be blocked until the async expression has finished, and will return the evaluated value and return control to the accessing thread. \r\n\r\nFor example:\r\n```\r\nvar c = 0;\r\n\r\nvar func = () => {\t\t\t\t\r\n\twhile (c < 3000000){\r\n\t\tc = c + 1;\r\n\t}\r\n\treturn c;\r\n};\r\n\r\nvar count = async func();\r\n\r\nprintln(\"func is executing in the background...\");\r\n\r\n//Busy time\r\nvar i = 0;\r\nwhile (i < 100000){\r\n\ti = i + 1;\r\n}\r\n\r\nprintln(\"current value of c is \" + c);\r\n\r\nprintln(\"final value is \" + count); // blocks this thread and waits for the async func call to finish\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}